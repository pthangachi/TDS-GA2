name: CI with Dependency Caching

on:
  push:
    branches:
      - main
  # Allows manual triggering to ensure we can run it once
  workflow_dispatch:

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up the correct Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # Or your required version

      # Step 3: Prime the cache with the required key
      - name: prime-cache-24da9c7
        id: cache-dependencies
        uses: actions/cache@v4
        with:
          # REQUIRED KEY: Use the specific cache key provided
          key: cache-24da9c7
          # Path to cache (e.g., Python's virtual environment or global package store)
          path: |
            ~/.cache/pip
            venv/

      # Step 4: Echo the cache result (required for verification)
      # We access the cache status using the step's ID: steps.cache-dependencies.outputs.cache-hit
      - name: Echo Cache Result
        run: |
          if [ "${{ steps.cache-dependencies.outputs.cache-hit }}" == "true" ]; then
            echo "Cache Hit: Dependencies restored successfully."
          else
            echo "Cache Miss: Dependencies must be installed."
          fi

      # Step 5: Install dependencies (Will be skipped on a cache hit)
      - name: Install dependencies
        # This step only runs if the cache was NOT a hit (i.e., on the first run or if dependencies changed)
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt # Assuming you have a requirements.txt file
          echo "Dependencies installed and saved to cache."

      # Step 6: Run tests (Example step)
      - name: Run Tests
        run: echo "Tests would run here..."
